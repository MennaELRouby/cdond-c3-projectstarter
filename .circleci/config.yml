version: 2.1
orbs: 
  slack: circleci/slack@4.10.1
commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: | 
            echo "Destroy environment: <<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [frontend-build]
      - run:
          name: Build front end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  
  build-backend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: back-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend test
          command: |
            cd backend
            npm install
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [front-build]
      - run:
          name: scan front-end
          command: |
           cd frontend
           npm install
           npm audit fix --audit-level=critical --force
           npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run: 
          name: Ensure backend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run: 
          name: add back-end ip to ansible inventory
          command: |
            touch .circleci/ansible/inventory.txt
            echo [web] > .circleci/ansible/inventory.txt
            BACKEND_PUBLICIP_ADDRESS=$( aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                 --region us-east-1 --output text)
                 echo $BACKEND_PUBLICIP_ADDRESS >> .circleci/ansible/inventory.txt
                 cat .circleci/ansible/inventory.txt

          # command: |
          #   BACKEND_INSTANCE_ID=$( aws ec2 describe-instances \
          #     --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
          #     -- query 'Reservations[].Instances[].InstanceId' --output text)
          #     echo $BACKEND_INSTANCE_ID
          #     aws ec2 wait instance-status-ok --instance-ids $BACKEND_INSTANCE_ID
          #     BACKEND_PUBLICIP_ADDRESS=$( aws ec2 describe-instances \
          #       --instance-ids $BACKEND_INSTANCE_ID \ 
          #       -- query 'Reservations[*].Instances[*].PublicIpAddress' \
          #        --region us-east-1 --output text)
          #        echo $BACKEND_PUBLICIP_ADDRESS >> .circle/ansible.inventory.txt
          #        cat .circle/ansible.inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0d:80:83:8b:f1:c8:8a:34:3a:76:36:69:be:3a:76:37"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm ansible zip
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible web  -m ping  -i inventory.txt -u ubuntu  -vvvv
            ansible-playbook -i inventory.txt configure-server.yml
      
workflows:
  default:
    jobs:
    - build-frontend
    - build-backend
    - test-frontend:
        requires: [build-frontend]
    - test-backend:
        requires: [build-backend]
    - scan-frontend:
        requires: [build-frontend]
    - scan-backend:
        requires: [build-backend]
    - deploy-infrastructure
    -   configure-infrastructure

