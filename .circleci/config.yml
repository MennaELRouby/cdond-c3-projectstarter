version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
          workflow_id:
            type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
          type: string
          default:   ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKETID}/migration_<<parameters.workflow_id>>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Back-end test
            command: |
              cd backend
              npm install
              npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Back-end scan
            command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
     - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_INSTANCE_ID=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query=Reservations[].Instances[].InstanceId --output text)
            echo $BACKEND_INSTANCE_ID
            aws ec2 wait instance-status-ok --instance-ids $BACKEND_INSTANCE_ID
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --instance-ids $BACKEND_INSTANCE_ID \
              --query 'Reservations[*].Instances[*].PublicIpAddress' --region us-east-1 \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
     - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm ansible zip
            pip install awscli
      - add_ssh_keys:
          fingerprints: ["c2:e8:9f:d7:f6:9e:48:b3:4b:1a:d5:99:0d:54:7a:0f"]
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible web  -m ping  -i inventory.txt -u ubuntu  -vvvv
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            pip install awscli
            cd backend
            npm install
            npm run migrations >> migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to Kvdb
          command: |
            cd backend
            if grep -q "has been executed successfully."  ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKETID}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"   
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 


workflows:
  default:
    jobs:
    #  - build-frontend
    #  - build-backend
    #  - test-frontend:
    #      requires: [build-frontend]
    #  - test-backend:
    #     requires: [build-backend]
    #  - scan-frontend:
    #      requires: [build-frontend]
    #  - scan-backend:
    #      requires: [build-backend]
      - deploy-infrastructure:
         # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
         requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
     
     